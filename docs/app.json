[{"name":"app.R","content":"library(shiny)\r\nlibrary(pwr)\r\nlibrary(ggplot2)\r\n\r\nui <- fluidPage(\r\n    tags$head(\r\n        tags$style(HTML(\"\r\n            body { font-size: 20px; }\r\n            .shiny-input-container { font-size: 16px; } /* Smaller font for input labels */\r\n            .form-control { font-size: 20px; }\r\n            .btn { font-size: 20px; }\r\n            h3 { font-size: 24px; font-weight: bold; }\r\n            .help-block { font-size: 18px; }\r\n            #sample_size { font-size: 22px; font-weight: bold; color: #333; padding: 10px; border: 2px solid #ddd; background-color: #f9f9f9; border-radius: 5px; white-space: pre-wrap; }\r\n            .custom-header { font-size: 20px; font-weight: bold; margin-top: 20px; }\r\n        \"))\r\n    ),\r\n    \r\n    titlePanel(\"Analiza apriori statističke moći za test nezavisnosti dveju kategoričkih varijabli\"),\r\n    \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            numericInput(\"k1\", \"Broj kategorija za varijablu A:\", value = 3, min = 2),\r\n            numericInput(\"k2\", \"Broj kategorija za varijablu B:\", value = 3, min = 2),\r\n            \r\n            h4(\"Varijabla A\"),\r\n            uiOutput(\"cat_names_A\"),\r\n            uiOutput(\"proportions_A_ui\"),\r\n            \r\n            h4(\"Varijabla B\"),\r\n            uiOutput(\"cat_names_B\"),\r\n            uiOutput(\"proportions_B_ui\"),\r\n            \r\n            numericInput(\"power\", \"Snaga testa:\", value = 0.8, min = 0.01, max = 1, step = 0.01),\r\n            numericInput(\"sig_level\", \"Nivo značajnosti (alpha):\", value = 0.05, min = 0.001, max = 0.1, step = 0.001),\r\n            \r\n            actionButton(\"calculate\", \"Izračunaj potreban broj ispitanika\")\r\n        ),\r\n        \r\n        mainPanel(\r\n            h3(\"Rezultati\"),\r\n            verbatimTextOutput(\"sample_size\"),\r\n            plotOutput(\"power_plot\")\r\n        )\r\n    )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n    \r\n    # UI for naming the categories for variable A\r\n    output$cat_names_A <- renderUI({\r\n        req(input$k1)\r\n        lapply(1:input$k1, function(i) {\r\n            textInput(inputId = paste0(\"catA_\", i),\r\n                      label = paste(\"Naziv kategorije A\", i),\r\n                      value = paste(\"A\", i))\r\n        })\r\n    })\r\n    \r\n    # UI for proportions for variable A (null and alternative)\r\n    output$proportions_A_ui <- renderUI({\r\n        req(input$k1)\r\n        names_A <- sapply(1:input$k1, function(i) input[[paste0(\"catA_\", i)]])\r\n        if (any(is.null(names_A) | names_A == \"\")) return(NULL)\r\n        \r\n        tagList(\r\n            div(class = \"custom-header\", \"Nulta hipoteza - očekivane proporcije za varijablu A:\"),\r\n            lapply(1:input$k1, function(i) {\r\n                numericInput(inputId = paste0(\"nullA_\", i),\r\n                             label = paste(\"Proporcija za kategoriju\", names_A[i]),\r\n                             value = round(1 / input$k1, 2),\r\n                             min = 0, max = 1, step = 0.01)\r\n            }),\r\n            div(class = \"custom-header\", \"Alternativna hipoteza - očekivane proporcije za varijablu A:\"),\r\n            lapply(1:input$k1, function(i) {\r\n                numericInput(inputId = paste0(\"altA_\", i),\r\n                             label = paste(\"Proporcija za kategoriju\", names_A[i]),\r\n                             value = round(1 / input$k1, 2),\r\n                             min = 0, max = 1, step = 0.01)\r\n            })\r\n        )\r\n    })\r\n    \r\n    # UI for naming the categories for variable B\r\n    output$cat_names_B <- renderUI({\r\n        req(input$k2)\r\n        lapply(1:input$k2, function(i) {\r\n            textInput(inputId = paste0(\"catB_\", i),\r\n                      label = paste(\"Naziv kategorije B\", i),\r\n                      value = paste(\"B\", i))\r\n        })\r\n    })\r\n    \r\n    # UI for proportions for variable B (null and alternative)\r\n    output$proportions_B_ui <- renderUI({\r\n        req(input$k2)\r\n        names_B <- sapply(1:input$k2, function(i) input[[paste0(\"catB_\", i)]])\r\n        if (any(is.null(names_B) | names_B == \"\")) return(NULL)\r\n        \r\n        tagList(\r\n            div(class = \"custom-header\", \"Nulta hipoteza - očekivane proporcije za varijablu B:\"),\r\n            lapply(1:input$k2, function(i) {\r\n                numericInput(inputId = paste0(\"nullB_\", i),\r\n                             label = paste(\"Proporcija za kategoriju\", names_B[i]),\r\n                             value = round(1 / input$k2, 2),\r\n                             min = 0, max = 1, step = 0.01)\r\n            }),\r\n            div(class = \"custom-header\", \"Alternativna hipoteza - očekivane proporcije za varijablu B:\"),\r\n            lapply(1:input$k2, function(i) {\r\n                numericInput(inputId = paste0(\"altB_\", i),\r\n                             label = paste(\"Proporcija za kategoriju\", names_B[i]),\r\n                             value = round(1 / input$k2, 2),\r\n                             min = 0, max = 1, step = 0.01)\r\n            })\r\n        )\r\n    })\r\n    \r\n    observeEvent(input$calculate, {\r\n        req(input$k1, input$k2)\r\n        \r\n        # Get marginal proportions for variable A:\r\n        nullA <- sapply(1:input$k1, function(i) input[[paste0(\"nullA_\", i)]])\r\n        altA  <- sapply(1:input$k1, function(i) input[[paste0(\"altA_\", i)]])\r\n        if (abs(sum(nullA) - 1) > 0.01 || abs(sum(altA) - 1) > 0.01) {\r\n            output$sample_size <- renderPrint({\r\n                cat(\"Greška: Zbir proporcija za varijablu A mora biti 1.\")\r\n            })\r\n            return()\r\n        }\r\n        \r\n        # Get marginal proportions for variable B:\r\n        nullB <- sapply(1:input$k2, function(i) input[[paste0(\"nullB_\", i)]])\r\n        altB  <- sapply(1:input$k2, function(i) input[[paste0(\"altB_\", i)]])\r\n        if (abs(sum(nullB) - 1) > 0.01 || abs(sum(altB) - 1) > 0.01) {\r\n            output$sample_size <- renderPrint({\r\n                cat(\"Greška: Zbir proporcija za varijablu B mora biti 1.\")\r\n            })\r\n            return()\r\n        }\r\n        \r\n        # Compute joint probabilities under null and alternative (outer product)\r\n        p_null <- as.vector(outer(nullA, nullB))\r\n        p_alt  <- as.vector(outer(altA, altB))\r\n        \r\n        # Compute effect size w\r\n        w <- sqrt(sum((p_alt - p_null)^2 / p_null))\r\n        \r\n        # Degrees of freedom for test of independence:\r\n        df <- (input$k1 - 1) * (input$k2 - 1)\r\n        \r\n        result <- pwr.chisq.test(w = w, df = df, power = input$power, sig.level = input$sig_level)\r\n        \r\n        output$sample_size <- renderPrint({\r\n            cat(\"Izračunata veličina efekta (w):\", round(w, 4), \"\\n\")\r\n            cat(capture.output(print(result)), sep = \"\\n\")\r\n        })\r\n        \r\n        output$power_plot <- renderPlot({\r\n            n_values <- seq(10, 500, by = 5)\r\n            power_values <- sapply(n_values, function(n) {\r\n                pwr.chisq.test(w = w, df = df, sig.level = input$sig_level, N = n)$power\r\n            })\r\n            \r\n            df_plot <- data.frame(N = n_values, Power = power_values)\r\n            \r\n            ggplot(df_plot, aes(x = N, y = Power)) +\r\n                geom_line(color = \"blue\", size = 1.2) +\r\n                geom_hline(yintercept = input$power, linetype = \"dashed\", color = \"red\") +\r\n                labs(title = \"Snaga testa u zavisnosti od veličine uzorka\",\r\n                     x = \"Veličina uzorka (N)\",\r\n                     y = \"Snaga (Power)\") +\r\n                theme_minimal(base_size = 20)\r\n        })\r\n    })\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
